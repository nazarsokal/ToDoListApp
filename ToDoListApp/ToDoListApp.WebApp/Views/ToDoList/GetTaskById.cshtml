@model ToDoListApp.WebApp.Models.ToDoListDetailDto

@{
    ViewBag.Title = Model.Title;
    Layout = "_Layout";
    var roleOptions = new[] { "Viewer", "Owner", "Editor" };
}

<div class="todo-detail-container">
    <div class="todo-header">
        <h2>@Model.Title</h2>
        <p class="todo-description">@Model.Description</p>
    </div>

    <div class="todo-meta">
        <span class="todo-status">Status: @Model.Status</span>
        <span class="todo-id">ID: @Model.ToDoListId</span>
    </div>

    <!-- ✅ TASKS SECTION -->
    <div class="todo-tasks">
        <!-- ✅ ADD TASK SECTION -->
        <div class="add-task-container">
            <button type="button" id="toggleAddTask" class="toggle-add-task-btn">+ Add New Task</button>

            <form id="addTaskForm" class="add-task-form hidden" method="post" asp-controller="ToDoList" asp-action="CreateTask">
                <h3>Add New Task</h3>
                <div class="add-task-fields">
                    <input type="text" name="Title" placeholder="Task title" required />

                    <textarea name="Description" placeholder="Description" rows="2" required></textarea>

                    <div class="add-task-inline">
                        <label>Due Date:</label>
                        <input type="datetime-local" name="DueDate" />

                        <label>Priority:</label>
                        <select name="Priority" class="priority-dropdown">
                            <option value="Low">Low</option>
                            <option value="Medium">Medium</option>
                            <option value="High">High</option>
                            <option value="Critical">Critical</option>
                        </select>

                        <label>Assign To:</label>
                        <select name="AssignedUserId" class="assigned-dropdown">
                            <option disabled selected>Select user</option>
                            @foreach (var user in Model.UserRoles)
                            {
                                var fullName = $"{user.FirstName} {user.LastName}";
                                <option value="@user.UserId">@fullName</option>
                            }
                        </select>
                    </div>

                    <input type="hidden" name="ToDoListId" value="@Model.ToDoListId" />

                    <div class="add-task-buttons">
                        <button type="submit" class="add-task-btn">Add Task</button>
                        <button type="button" id="cancelAddTask" class="cancel-task-btn">Cancel</button>
                    </div>
                </div>
            </form>
        </div>

        <h3>Tasks</h3>
        @if (Model?.TasksList != null && Model.TasksList.Any())
        {
            <ul class="tasks-list">
                @foreach (var task in Model.TasksList)
                {
                    <li class="task-card">
                        <div class="task-header">
                            <span class="task-title">@task.Title</span>
                            <div class="task-actions">
                                <button class="task-btn edit-btn" title="Edit">
                                    <i class="fa fa-edit"></i> Edit
                                </button>
                                <button class="task-btn delete-btn" title="Remove">
                                    <i class="fa fa-trash"></i> Remove
                                </button>
                            </div>
                        </div>
                        <form id="editForm-@task.TaskId"
                              class="edit-task-form hidden"
                              method="post"
                              asp-controller="ToDoList"
                              asp-action="UpdateTask">
                            <input type="hidden" name="ToDoListId" value="@Model.ToDoListId" />
                            <input type="hidden" name="Id" value="@task.TaskId"/>

                            <div class="edit-task-fields">
                                <label>Title:</label>
                                <input type="text" name="Title" value="@task.Title" required/>

                                <label>Description:</label>
                                <textarea name="Description" rows="2" required>@task.Description</textarea>

                                <div class="edit-task-inline">
                                    <label>Due Date:</label>
                                    <input type="datetime-local"
                                           name="DueDate"
                                           value="@(task.DueDate == DateTime.MinValue ? "" : task.DueDate.ToString("yyyy-MM-ddTHH:mm"))"/>

                                    <label>Priority:</label>
                                    <select name="Priority">
                                        <option value="Low" selected="@(task.Priority == "Low")">Low</option>
                                        <option value="Medium" selected="@(task.Priority == "Medium")">Medium</option>
                                        <option value="High" selected="@(task.Priority == "High")">High</option>
                                        <option value="Critical" selected="@(task.Priority == "Critical")">Critical</option>
                                    </select>

                                    <label>Status:</label>
                                    <select name="Status">
                                        <option value="NotStarted" selected="@(task.Status == "NotStarted")">Not Started</option>
                                        <option value="InProgress" selected="@(task.Status == "InProgress")">In Progress</option>
                                        <option value="Completed" selected="@(task.Status == "Completed")">Completed</option>
                                    </select>
                                </div>

                                <label>Assign To:</label>
                                <select name="AssignedUserId">
                                    <option disabled selected>Select user</option>
                                    @foreach (var user in Model.UserRoles)
                                    {
                                        var fullName = $"{user.FirstName} {user.LastName}";
                                        <option value="@user.UserId" selected="@(task.AssignedUserId == user.UserId)">
                                            @fullName
                                        </option>
                                    }
                                </select>
                            </div>

                            <div class="edit-task-buttons">
                                <button type="submit" class="save-edit-btn">Save</button>
                                <button type="button" class="cancel-edit-btn" data-task-id="@task.TaskId">Cancel</button>
                            </div>
                        </form>

                        <div class="task-meta">
                            <span><strong>ID:</strong> @task.TaskId</span>
                            <span><strong>Created:</strong> @task.DateCreated.ToString("yyyy-MM-dd HH:mm")</span>
                            <span><strong>Due:</strong> @task.DueDate.ToString("yyyy-MM-dd HH:mm")</span>
                        </div>

                        <div class="task-description">
                            @task.Description
                        </div>

                        <div class="task-bottom">
                            <div class="task-priority">
                                <span class="priority-dot @task.Priority.ToString().ToLower()"></span>
                                <span class="priority-text">@task.Priority</span>
                            </div>

                            <div class="task-status">
                                <strong>Status:</strong> @task.Status
                            </div>

                            <div class="task-assigned">
                                <label>Assigned:</label>
                                <select class="assigned-dropdown" name="assigned-@task.TaskId">
                                    <option disabled selected>Select user</option>
                                    @foreach (var user in Model.UserRoles)
                                    {
                                        var fullName = $"{user.FirstName} {user.LastName}";
                                        <option value="@user.UserId" selected="@(task.AssignedUserId == user.UserId)">
                                            @fullName
                                        </option>
                                    }
                                </select>
                            </div>
                        </div>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="no-tasks">No tasks in this list.</p>
        }
    </div>

    <!-- ✅ USERS SECTION (unchanged) -->
    @if (Model?.UserRoles != null && Model.UserRoles.Any())
    {
        <div class="todo-users">
            <h3>User Roles</h3>

            <form class="add-user-form" method="post" action="/ToDoList/adduser">
                <input type="hidden" name="id" value="@Model.ToDoListId" />
                <div class="add-user-fields">
                    <input type="email" name="Email" placeholder="Email" required />
                    <select name="Role" class="role-dropdown">
                        <option value="Viewer">Viewer</option>
                        <option value="Owner">Owner</option>
                        <option value="Editor">Editor</option>
                    </select>
                    <button type="submit" class="add-user-btn">Add User</button>
                </div>
            </form>

            <table class="user-roles-table">
                <thead>
                    <tr>
                        <th>First Name</th>
                        <th>Last Name</th>
                        <th>Role</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var userRole in Model.UserRoles)
                {
                    <tr>
                        <td>@userRole.FirstName</td>
                        <td>@userRole.LastName</td>
                        <td>
                            <select class="role-dropdown" name="role-@userRole.UserId">
                                @foreach (var option in roleOptions)
                                {
                                    if (userRole.Role.ToString() == option)
                                    {
                                        <option value="@option" selected="selected">@option</option>
                                    }
                                    else
                                    {
                                        <option value="@option">@option</option>
                                    }
                                }
                            </select>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    }
</div>

<!-- ✅ STYLES -->
<style>
.todo-detail-container {
    max-width: 700px;
    margin: 40px auto;
    background: #fff;
    border-radius: 12px;
    box-shadow: 0 2px 12px rgba(0,0,0,0.07);
    padding: 32px 40px;
    font-family: 'Segoe UI', Arial, sans-serif;
}
.todo-header h2 {
    margin-bottom: 8px;
    font-size: 2.2rem;
    color: #2d3e50;
}
.todo-description {
    color: #6c7a89;
    font-size: 1.1rem;
    margin-bottom: 16px;
}
.todo-meta {
    display: flex;
    gap: 24px;
    margin-bottom: 24px;
    font-size: 1rem;
    color: #4a4a4a;
    flex-wrap: wrap;
}
.todo-status {
    font-weight: 600;
    padding: 4px 12px;
    border-radius: 6px;
    background: #e3eafc;
    color: #2d3e50;
}
.todo-id, .todo-date {
    background: #f2f6fa;
    padding: 4px 12px;
    border-radius: 6px;
    font-size: 0.95rem;
}

/* ✅ TASKS */
.tasks-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 16px;
}
.task-card {
    background: #f9fbfd;
    border: 1px solid #e4e9f2;
    border-radius: 10px;
    padding: 16px 20px;
    box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
    transition: transform 0.15s ease, box-shadow 0.15s ease;
}
.task-card:hover {
    transform: translateY(-3px);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
}
.task-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 8px;
}
.task-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #2d3e50;
}
.task-actions {
    display: flex;
    gap: 8px;
}
.task-btn {
    background: none;
    border: none;
    cursor: pointer;
    padding: 5px 10px;
    border-radius: 5px;
    font-weight: 600;
    transition: background 0.2s ease;
}
.edit-btn {
    color: #1a73e8;
}
.edit-btn:hover {
    background: #e3eafc;
}
.delete-btn {
    color: #d93025;
}
.delete-btn:hover {
    background: #fdeaea;
}
.task-meta {
    font-size: 0.9rem;
    color: #6c7a89;
    display: flex;
    flex-wrap: wrap;
    gap: 14px;
    margin-bottom: 8px;
}
.task-description {
    color: #2d3e50;
    font-size: 1rem;
    margin-bottom: 10px;
}
.task-bottom {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 10px;
    border-top: 1px solid #e4e9f2;
    padding-top: 10px;
}
.task-priority {
    display: flex;
    align-items: center;
    gap: 6px;
    font-weight: 600;
}
.priority-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    display: inline-block;
}
.priority-dot.low { background: #2ecc71; }      /* green */
.priority-dot.medium { background: #f39c12; }   /* orange */
.priority-dot.high { background: #e74c3c; }     /* red */
.priority-dot.critical { background: #c0392b; } /* dark red */
.task-status {
    color: #2d3e50;
}
.task-assigned label {
    font-weight: 600;
    margin-right: 6px;
}
.assigned-dropdown {
    padding: 6px 10px;
    border-radius: 5px;
    border: 1px solid #bfc9d1;
    background: #fff;
    font-size: 0.95rem;
    color: #2d3e50;
}

/* ✅ USER ROLES (unchanged) */
.todo-users {
    margin-top: 36px;
}
.user-roles-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 12px;
    background: #f9fbfd;
    border-radius: 8px;
    overflow: hidden;
}
.user-roles-table th, .user-roles-table td {
    padding: 10px 8px;
    text-align: left;
}
.user-roles-table th {
    background: #e3eafc;
    color: #2d3e50;
    font-weight: 600;
}
.user-roles-table tr:nth-child(even) {
    background: #f2f6fa;
}
.role-dropdown {
    padding: 6px 10px;
    border-radius: 5px;
    border: 1px solid #bfc9d1;
    background: #fff;
    font-size: 1rem;
    color: #2d3e50;
}
.add-user-form {
    display: flex;
    flex-direction: column;
    margin-bottom: 18px;
    gap: 8px;
}
.add-user-fields {
    display: flex;
    gap: 10px;
    align-items: center;
}
.add-user-form input[type="text"],
.add-user-form input[type="email"],
.add-user-form select {
    padding: 6px 10px;
    border-radius: 5px;
    border: 1px solid #bfc9d1;
    font-size: 1rem;
    color: #2d3e50;
}
.add-user-btn {
    background: #2d3e50;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 7px 18px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s;
}
.add-user-btn:hover {
    background: #1a2533;
}

     /* === ADD TASK FORM TOGGLE === */
 .add-task-container {
     margin-bottom: 25px;
 }

.toggle-add-task-btn {
    background: #2d3e50;
    color: #fff;
    border: none;
    border-radius: 8px;
    padding: 10px 18px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s ease, transform 0.1s ease;
}

.toggle-add-task-btn:hover {
    background: #1a2533;
    transform: translateY(-1px);
}

/* Hide form initially */
.hidden {
    display: none;
}

/* Existing styles reused */
.add-task-form {
    background: #f9fbfd;
    border: 1px solid #e4e9f2;
    border-radius: 10px;
    padding: 20px 24px;
    margin-top: 18px;
    box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
    animation: fadeIn 0.2s ease;
}

.add-task-buttons {
    display: flex;
    gap: 10px;
    align-items: center;
}

.cancel-task-btn {
    background: #b0b0b0;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 8px 18px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: background 0.2s;
}

.cancel-task-btn:hover {
    background: #8a8a8a;
}
/* === EDIT TASK FORM === */
.edit-task-form {
    background: #f9fbfd;
    border: 1px solid #e4e9f2;
    border-radius: 10px;
    padding: 20px;
    margin-top: 12px;
    box-shadow: 0 1px 6px rgba(0, 0, 0, 0.05);
    animation: fadeIn 0.2s ease;
}

.edit-task-fields {
    display: flex;
    flex-direction: column;
    gap: 10px;
}

.edit-task-inline {
    display: flex;
    gap: 10px;
    align-items: center;
    flex-wrap: wrap;
}

.edit-task-form input,
.edit-task-form textarea,
.edit-task-form select {
    border: 1px solid #bfc9d1;
    border-radius: 5px;
    padding: 6px 10px;
    font-size: 0.95rem;
    color: #2d3e50;
}

.edit-task-buttons {
    display: flex;
    gap: 10px;
    margin-top: 10px;
}

.save-edit-btn {
    background: #1a73e8;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 8px 18px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
}

.save-edit-btn:hover {
    background: #145ec4;
}

.cancel-edit-btn {
    background: #b0b0b0;
    color: #fff;
    border: none;
    border-radius: 5px;
    padding: 8px 18px;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
}

.cancel-edit-btn:hover {
    background: #8a8a8a;
}


/* Smooth fade in */
@@keyframes fadeIn {
    from { opacity: 0; transform: scale(0.98); }
    to { opacity: 1; transform: scale(1); }
}
</style>
<script>
document.addEventListener("DOMContentLoaded", function () {
    const toggleBtn = document.getElementById("toggleAddTask");
    const cancelBtn = document.getElementById("cancelAddTask");
    const form = document.getElementById("addTaskForm");

    toggleBtn.addEventListener("click", () => {
        form.classList.remove("hidden");
        toggleBtn.style.display = "none";
    });

    cancelBtn.addEventListener("click", () => {
        form.classList.add("hidden");
        toggleBtn.style.display = "inline-block";
    });
});

document.addEventListener("DOMContentLoaded", function () {
    // Existing toggle for Add Task
    const toggleBtn = document.getElementById("toggleAddTask");
    const cancelBtn = document.getElementById("cancelAddTask");
    const form = document.getElementById("addTaskForm");

    toggleBtn?.addEventListener("click", () => {
        form.classList.remove("hidden");
        toggleBtn.style.display = "none";
    });
    cancelBtn?.addEventListener("click", () => {
        form.classList.add("hidden");
        toggleBtn.style.display = "inline-block";
    });
    
    document.querySelectorAll(".edit-btn").forEach(button => {
        button.addEventListener("click", function () {
            const card = this.closest(".task-card");
            const form = card.querySelector(".edit-task-form");
            form.classList.toggle("hidden");
        });
    });

    document.querySelectorAll(".cancel-edit-btn").forEach(button => {
        button.addEventListener("click", function () {
            const taskId = this.getAttribute("data-task-id");
            const form = document.getElementById(`editForm-${taskId}`);
            form.classList.add("hidden");
        });
    });
});
</script>
